include "general"

akka {




  stdout-loglevel = off // defaults to WARNING can be disabled with off. The stdout-loglevel is only in effect during system startup and shutdown
  log-dead-letters-during-shutdown = on
  loglevel = WARNING
  log-dead-letters = on
  log-config-on-start = off // Log the complete configuration at INFO level when the actor system is started

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  persistence {
    journal.plugin = "jdbc-journal"
    snapshot-store.plugin = "jdbc-snapshot-store"
  }

  actor {
    serialize-messages = off // verify that messages are serializable
    provider = "akka.cluster.ClusterActorRefProvider"
    debug {
      receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = on // log all special messages like Kill, PoisoffPill etc sent to all actors
      lifecycle = on // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = on // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }

    serializers {
      kryo = "com.twitter.chill.akka.AkkaSerializer"
    }
  }


  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2551
    }
  }


  cluster {
    seed-nodes = ["akka.tcp://ClusterSystem@127.0.0.1:2551"]
  }



}

jdbc-journal {
  tables {
    journal {
      tableName = "journal"
      schemaName = "akka_persistence_jdbc"
    }

    deletedTo {
      tableName = "deleted_to"
      schemaName = "akka_persistence_jdbc"
    }
  }

  slick = ${slick}

}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  tables {
    snapshot {
      tableName = "snapshot"
      schemaName = "akka_persistence_jdbc"
    }
  }

  slick = ${slick}
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  # New events are retrieved (polled) with this interval.
  refresh-interval = "1s"

  # How many events to fetch in one query (replay) and keep buffered until they
  # are delivered downstreams.
  max-buffer-size = "500"

  tables {
    journal {
      tableName = "journal"
      schemaName = "akka_persistence_jdbc"
    }
  }

  slick = ${slick}
}

// readmodel for person
person-read-model {
  host = "localhost"
  port = "5432"
  name = "docker"

  url = "jdbc:postgresql://localhost:5432/docker"
  user = "docker"
  password = "docker"
  driver = "org.postgresql.Driver"
  keepAliveConnection = on
  numThreads = 2
  queueSize = 100
}